// Generated by CoffeeScript 1.6.3
(function() {
  var api, arrToObj, camelToDisplay, compositeTypes, data, exclude, fs, getType, handlers, ident, inApi, isComposite, mutateHandlers, notComposite, notEmpty, site,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  site = {
    skus: require('../data/site-skus'),
    bestUsedFors: require('../data/site-bestUsedFors')
  };

  api = require('../data/api');

  inApi = site.skus.filter(function(sku) {
    return sku in api;
  });

  data = {};

  ident = function(x) {
    return x;
  };

  camelToDisplay = function(s) {
    var i, result, uppered, _i, _ref;
    result = s[0].toUpperCase();
    uppered = s.toUpperCase();
    for (i = _i = 1, _ref = s.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      result += (s[i] === uppered[i] ? ' ' + uppered[i] : s[i]);
    }
    return result;
  };

  arrToObj = function(arr, key, valKey) {
    var obj;
    obj = {};
    arr.forEach(function(o) {
      return obj[o[key]] = o[valKey];
    });
    return obj;
  };

  getType = function(val) {
    var type;
    type = typeof val;
    if (Array.isArray(val)) {
      return 'array';
    } else if (type === 'object') {
      if (val == null) {
        return 'null';
      } else {
        return 'object';
      }
    } else {
      return type;
    }
  };

  compositeTypes = ['array', 'object'];

  isComposite = function(val) {
    var _ref;
    return _ref = getType(val), __indexOf.call(compositeTypes, _ref) >= 0;
  };

  notComposite = function(val) {
    return !isComposite(val);
  };

  notEmpty = function(obj) {
    return (obj != null) && ((notComposite(obj) && obj !== "") || Object.keys(obj).length > 0);
  };

  exclude = ['name', 'url', 'baseProduct', 'productNumber', 'testimonials', 'pricing', 'faqs', 'packaging'];

  handlers = {
    features: ident,
    relatedProductNumbers: function(arr) {
      return arr.filter(function(sku) {
        return __indexOf.call(site.skus, sku) >= 0 && sku in api;
      });
    },
    lockDimensions: function(arr) {
      return arrToObj(arr, 'name', 'dimention');
    },
    bestUsedFors: function(arr) {
      return arrToObj(arr.filter(function(obj) {
        return site.bestUsedFors[obj.name];
      }), 'name', 'image');
    },
    videos: ident
  };

  mutateHandlers = {
    images: function(imageObj, product) {
      if (imageObj.schematic != null) {
        return product.schematic = imageObj.schematic;
      }
    }
  };

  inApi.forEach(function(sku) {
    var apiProduct, details, key, product, result, val;
    apiProduct = api[sku];
    product = {};
    details = {};
    for (key in apiProduct) {
      val = apiProduct[key];
      if (notEmpty(val)) {
        if (key in handlers) {
          result = handlers[key](val);
          if (notEmpty(result)) {
            product[key] = result;
          }
        } else if (key in mutateHandlers) {
          mutateHandlers[key](val, product);
        } else if (__indexOf.call(exclude, key) < 0) {
          details[camelToDisplay(key)] = val;
        }
      }
    }
    if (notEmpty(details)) {
      product.details = details;
    }
    return data[sku] = product;
  });

  fs.writeFileSync('./out.json', JSON.stringify(data));

}).call(this);
